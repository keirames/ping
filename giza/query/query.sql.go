// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  pgtype.Text
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getMessagesByRoomID = `-- name: GetMessagesByRoomID :many
SELECT id, content, type, is_delete, parent_id, created_at, user_id, room_id FROM messages m
WHERE m.room_id = $1
ORDER BY m.created_at ASC
LIMIT 10
OFFSET $2
`

type GetMessagesByRoomIDParams struct {
	RoomID int64
	Offset int32
}

func (q *Queries) GetMessagesByRoomID(ctx context.Context, arg GetMessagesByRoomIDParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesByRoomID, arg.RoomID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Type,
			&i.IsDelete,
			&i.ParentID,
			&i.CreatedAt,
			&i.UserID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isMemberOfRoom = `-- name: IsMemberOfRoom :one
SELECT 1 FROM users_and_chat_rooms uacr
WHERE uacr.user_id = $1
AND uacr.room_id = $2
`

type IsMemberOfRoomParams struct {
	UserID int64
	RoomID int64
}

func (q *Queries) IsMemberOfRoom(ctx context.Context, arg IsMemberOfRoomParams) (int32, error) {
	row := q.db.QueryRow(ctx, isMemberOfRoom, arg.UserID, arg.RoomID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const isMessageExist = `-- name: IsMessageExist :one
SELECT 1 FROM messages m
WHERE m.id = $1
AND m.room_id = $2
`

type IsMessageExistParams struct {
	ID     int64
	RoomID int64
}

func (q *Queries) IsMessageExist(ctx context.Context, arg IsMessageExistParams) (int32, error) {
	row := q.db.QueryRow(ctx, isMessageExist, arg.ID, arg.RoomID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const isRoomExist = `-- name: IsRoomExist :one
SELECT 1 FROM chat_rooms r
WHERE r.id = $1
`

func (q *Queries) IsRoomExist(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRow(ctx, isRoomExist, id)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
